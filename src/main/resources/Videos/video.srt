1
00:00:02,659 --> 00:00:05,250
hello this is Matthew from simply learn

2
00:00:05,250 --> 00:00:07,620
and today we're gonna cover what is

3
00:00:07,620 --> 00:00:10,530
docker and why it should be of value to

4
00:00:10,530 --> 00:00:13,679
you as somebody who works in DevOps so

5
00:00:13,679 --> 00:00:15,960
let's take a throw scenario a very

6
00:00:15,960 --> 00:00:18,810
developer Etna testa before you had the

7
00:00:18,810 --> 00:00:21,240
world of docker a developer would

8
00:00:21,240 --> 00:00:23,369
actually build their code and then

9
00:00:23,369 --> 00:00:25,890
they'd send it to the tester but then

10
00:00:25,890 --> 00:00:28,289
the code wouldn't work on their system

11
00:00:28,289 --> 00:00:30,510
coders are worldly a system due to the

12
00:00:30,510 --> 00:00:32,969
differences in computer environments so

13
00:00:32,969 --> 00:00:35,700
what could be the solution to this well

14
00:00:35,700 --> 00:00:37,410
you could go ahead and create a virtual

15
00:00:37,410 --> 00:00:39,989
machine to be the same of the solution

16
00:00:39,989 --> 00:00:42,390
in both areas what do you think docker

17
00:00:42,390 --> 00:00:45,570
is an even better solution so let's kind

18
00:00:45,570 --> 00:00:47,760
of break out what the main big

19
00:00:47,760 --> 00:00:49,800
differences are between docker and

20
00:00:49,800 --> 00:00:51,629
virtual machines as you can see between

21
00:00:51,629 --> 00:00:53,730
the left and the right hand side both

22
00:00:53,730 --> 00:00:56,850
look to be very similar what you'll see

23
00:00:56,850 --> 00:00:59,670
however is that on the docker side what

24
00:00:59,670 --> 00:01:01,710
you'll see as a big difference is that

25
00:01:01,710 --> 00:01:05,040
the guest OS for each container has been

26
00:01:05,040 --> 00:01:07,950
eliminated docker is inherently more

27
00:01:07,950 --> 00:01:10,170
lightweight but provides the same

28
00:01:10,170 --> 00:01:13,650
functionality as a virtual machine so

29
00:01:13,650 --> 00:01:15,450
let's step through some of the pros and

30
00:01:15,450 --> 00:01:18,659
cons of a virtual machine versus docker

31
00:01:18,659 --> 00:01:20,310
so first of all a virtual machine

32
00:01:20,310 --> 00:01:24,270
occupies a lot more memory space on the

33
00:01:24,270 --> 00:01:25,380
host machine

34
00:01:25,380 --> 00:01:29,130
in contrast Dhaka occupies significantly

35
00:01:29,130 --> 00:01:31,860
less memory space the boot up time

36
00:01:31,860 --> 00:01:34,770
between both is very different docker

37
00:01:34,770 --> 00:01:38,729
just boots up faster the performance of

38
00:01:38,729 --> 00:01:41,040
the docker environment is actually

39
00:01:41,040 --> 00:01:43,890
better and more consistent than the

40
00:01:43,890 --> 00:01:47,250
virtual machine docker is also very easy

41
00:01:47,250 --> 00:01:50,700
to set up and very easy to scale the

42
00:01:50,700 --> 00:01:53,430
efficiencies therefore a much higher

43
00:01:53,430 --> 00:01:55,619
with a docker environment versus a

44
00:01:55,619 --> 00:01:58,079
virtual machine environment and you'll

45
00:01:58,079 --> 00:02:01,409
find it is easier to port docker across

46
00:02:01,409 --> 00:02:04,079
multiple platforms than a virtual

47
00:02:04,079 --> 00:02:06,659
machine finally the space allocation

48
00:02:06,659 --> 00:02:09,679
between docker and a virtual machine is

49
00:02:09,679 --> 00:02:12,000
significant when you don't have to

50
00:02:12,000 --> 00:02:13,800
include the guest Oh

51
00:02:13,800 --> 00:02:16,740
you're eliminating a significant amount

52
00:02:16,740 --> 00:02:18,780
of space and the dock environment is

53
00:02:18,780 --> 00:02:22,560
just inherently smaller so after darker

54
00:02:22,560 --> 00:02:24,630
as a developer you can build out your

55
00:02:24,630 --> 00:02:27,630
solution and send it to a tester and as

56
00:02:27,630 --> 00:02:29,280
long as we're all running in the doctor

57
00:02:29,280 --> 00:02:31,680
environment everything will work just

58
00:02:31,680 --> 00:02:34,110
great so let's step through what can I

59
00:02:34,110 --> 00:02:36,030
cover in this presentation we're gonna

60
00:02:36,030 --> 00:02:38,190
look at the DevOps tools and where

61
00:02:38,190 --> 00:02:40,560
docker fits within that space we'll

62
00:02:40,560 --> 00:02:42,750
examine what docker actually is and how

63
00:02:42,750 --> 00:02:45,750
docker works and then finally we'll step

64
00:02:45,750 --> 00:02:47,670
through the different components of the

65
00:02:47,670 --> 00:02:50,630
docker environment so what is DevOps

66
00:02:50,630 --> 00:02:52,830
DevOps is a collaboration between the

67
00:02:52,830 --> 00:02:54,630
development team the operation team

68
00:02:54,630 --> 00:02:56,910
allowing you to continuously deliver

69
00:02:56,910 --> 00:02:59,100
solutions and applications and services

70
00:02:59,100 --> 00:03:01,350
that both delight and improve the

71
00:03:01,350 --> 00:03:03,750
efficiency of your customers if you look

72
00:03:03,750 --> 00:03:05,700
at the Venn diagram that we have here on

73
00:03:05,700 --> 00:03:08,190
the left hand side we have development

74
00:03:08,190 --> 00:03:10,590
on the right hand side we have operation

75
00:03:10,590 --> 00:03:12,510
and then there's a cross over in the

76
00:03:12,510 --> 00:03:14,610
middle and that's where the DevOps team

77
00:03:14,610 --> 00:03:17,580
sits if we look at the areas of

78
00:03:17,580 --> 00:03:19,670
integration between both groups

79
00:03:19,670 --> 00:03:21,840
developers are really interested in

80
00:03:21,840 --> 00:03:24,450
planning code building and testing and

81
00:03:24,450 --> 00:03:25,920
operations want to be able to

82
00:03:25,920 --> 00:03:28,290
efficiently deploy operate a monitor

83
00:03:28,290 --> 00:03:29,970
when you can have both groups

84
00:03:29,970 --> 00:03:32,580
interacting with each other on these

85
00:03:32,580 --> 00:03:36,180
seven key and elements then you can have

86
00:03:36,180 --> 00:03:38,550
the efficiencies of an excellent DevOps

87
00:03:38,550 --> 00:03:40,830
team so planning in codebase we use

88
00:03:40,830 --> 00:03:42,600
tools like JIT and Guerra

89
00:03:42,600 --> 00:03:45,440
for building we use Gradle and mavin

90
00:03:45,440 --> 00:03:49,440
testing we use selenium the integration

91
00:03:49,440 --> 00:03:52,230
between dev and ops is through tools

92
00:03:52,230 --> 00:03:53,430
such as Jenkins

93
00:03:53,430 --> 00:03:56,040
and then the deployment operation is

94
00:03:56,040 --> 00:03:58,410
done with tools such as docker and share

95
00:03:58,410 --> 00:04:02,010
finally nagas is used to monitor the

96
00:04:02,010 --> 00:04:04,980
entire environment so let's step deeper

97
00:04:04,980 --> 00:04:07,620
into what docker actually is so docker

98
00:04:07,620 --> 00:04:09,690
is a tool which is used to automate the

99
00:04:09,690 --> 00:04:11,910
deployment applications in a lightweight

100
00:04:11,910 --> 00:04:14,340
container so the application can work

101
00:04:14,340 --> 00:04:17,910
efficiently in different environments no

102
00:04:17,910 --> 00:04:19,350
it's important to note that the

103
00:04:19,350 --> 00:04:21,060
container is actually a software package

104
00:04:21,060 --> 00:04:23,070
that consists of all the dependencies

105
00:04:23,070 --> 00:04:25,720
required to run the application

106
00:04:25,720 --> 00:04:27,790
so multiple containers can run on the

107
00:04:27,790 --> 00:04:29,950
same hardware the containers are

108
00:04:29,950 --> 00:04:32,590
maintained in isolated environments

109
00:04:32,590 --> 00:04:35,110
they're highly productive and they're

110
00:04:35,110 --> 00:04:37,600
quick and easy to configure so let's

111
00:04:37,600 --> 00:04:40,300
take an example of what dogger is by

112
00:04:40,300 --> 00:04:42,550
using a house that may be rented for

113
00:04:42,550 --> 00:04:45,370
someone using Airbnb so in the house

114
00:04:45,370 --> 00:04:48,130
there are three rooms and only one

115
00:04:48,130 --> 00:04:50,830
cupboard and kitchen and the problem we

116
00:04:50,830 --> 00:04:52,600
have is that none of the guests are

117
00:04:52,600 --> 00:04:54,700
really ready to share the cupboard and

118
00:04:54,700 --> 00:04:57,010
kitchen because every individual has a

119
00:04:57,010 --> 00:04:58,690
different preference when it comes to

120
00:04:58,690 --> 00:05:00,430
how the cupboard should be stocked and

121
00:05:00,430 --> 00:05:03,130
how the kitchen should be used this is

122
00:05:03,130 --> 00:05:05,380
very similar to how we run software

123
00:05:05,380 --> 00:05:07,660
applications today each of the

124
00:05:07,660 --> 00:05:09,430
applications could end up using

125
00:05:09,430 --> 00:05:13,000
different frameworks so you may have a

126
00:05:13,000 --> 00:05:15,760
framework such as rails perfect and

127
00:05:15,760 --> 00:05:18,190
flask and you may want to have them

128
00:05:18,190 --> 00:05:20,020
running for different applications for

129
00:05:20,020 --> 00:05:22,630
different situations this is where

130
00:05:22,630 --> 00:05:23,830
docker will help you run the

131
00:05:23,830 --> 00:05:25,870
applications with the suitable

132
00:05:25,870 --> 00:05:28,270
frameworks so let's go back to our

133
00:05:28,270 --> 00:05:31,390
Airbnb example so we have three rooms

134
00:05:31,390 --> 00:05:33,520
and a kitchen and cupboard how do we

135
00:05:33,520 --> 00:05:36,400
resolve this issue well we put a kitchen

136
00:05:36,400 --> 00:05:38,950
in covered in each room we can do the

137
00:05:38,950 --> 00:05:41,710
same thing for computers docker provides

138
00:05:41,710 --> 00:05:43,810
the suitable frameworks for each

139
00:05:43,810 --> 00:05:46,000
different application and since every

140
00:05:46,000 --> 00:05:47,500
application has a framework with a

141
00:05:47,500 --> 00:05:49,510
suitable version this space can also

142
00:05:49,510 --> 00:05:52,060
then be utilized for putting in Suffern

143
00:05:52,060 --> 00:05:54,400
applications that are long and since

144
00:05:54,400 --> 00:05:56,919
every application has its own framework

145
00:05:56,919 --> 00:05:59,080
and suitable version the area that we

146
00:05:59,080 --> 00:06:01,780
had previously stored for a framework

147
00:06:01,780 --> 00:06:04,600
can be used for something else now we

148
00:06:04,600 --> 00:06:07,060
can create a new application in this

149
00:06:07,060 --> 00:06:09,370
instance a fourth application that uses

150
00:06:09,370 --> 00:06:12,400
its own resources you know what

151
00:06:12,400 --> 00:06:14,200
with these kinds of abilities to be able

152
00:06:14,200 --> 00:06:16,360
to free up space on the computer

153
00:06:16,360 --> 00:06:18,400
it's no wonder docker is the right

154
00:06:18,400 --> 00:06:20,830
choice so let's take a closer look to

155
00:06:20,830 --> 00:06:23,680
how docker actually works so when we

156
00:06:23,680 --> 00:06:25,720
look at docker and we call something

157
00:06:25,720 --> 00:06:27,160
Dokka we're actually referring to the

158
00:06:27,160 --> 00:06:29,140
base engine which actually is installed

159
00:06:29,140 --> 00:06:31,240
on the host machine that has all the

160
00:06:31,240 --> 00:06:32,919
different components that run your

161
00:06:32,919 --> 00:06:36,010
docker environment and if we look at the

162
00:06:36,010 --> 00:06:37,870
image on the left-hand side of the

163
00:06:37,870 --> 00:06:39,490
screen you'll see that docker

164
00:06:39,490 --> 00:06:42,370
has a client-server relationship there

165
00:06:42,370 --> 00:06:45,250
is a client installed on the hardware

166
00:06:45,250 --> 00:06:47,259
there is a client that contains the

167
00:06:47,259 --> 00:06:49,030
docker product and then there is a

168
00:06:49,030 --> 00:06:51,460
server which controls how that docker

169
00:06:51,460 --> 00:06:54,699
client is created the communication that

170
00:06:54,699 --> 00:06:57,009
goes back and forth to be able to share

171
00:06:57,009 --> 00:06:58,990
the knowledge on that docker client

172
00:06:58,990 --> 00:07:00,819
relationship is done through a REST API

173
00:07:00,819 --> 00:07:03,280
this is fantastic news because that

174
00:07:03,280 --> 00:07:04,900
means that you can actually interface

175
00:07:04,900 --> 00:07:07,750
and program that API so we look here in

176
00:07:07,750 --> 00:07:09,910
the animation we see that the docker

177
00:07:09,910 --> 00:07:12,789
client is constantly communicating back

178
00:07:12,789 --> 00:07:15,490
to the server information about the

179
00:07:15,490 --> 00:07:17,949
infrastructure and it's using this REST

180
00:07:17,949 --> 00:07:21,009
API as that communication channel the

181
00:07:21,009 --> 00:07:23,199
dock a server then we'll check out the

182
00:07:23,199 --> 00:07:25,630
requests and the interaction necessary

183
00:07:25,630 --> 00:07:27,849
for it to be the docker daemon which

184
00:07:27,849 --> 00:07:30,069
runs on the server itself will then

185
00:07:30,069 --> 00:07:31,620
check out the interaction and the

186
00:07:31,620 --> 00:07:34,750
necessary operating system pieces needed

187
00:07:34,750 --> 00:07:37,419
to be able to run the container okay so

188
00:07:37,419 --> 00:07:39,940
that's just an overview of the docker

189
00:07:39,940 --> 00:07:41,830
engine which is probably where you're

190
00:07:41,830 --> 00:07:44,110
going to spend most of your time but

191
00:07:44,110 --> 00:07:45,729
there are some other components that

192
00:07:45,729 --> 00:07:48,159
form the infrastructure for docker let's

193
00:07:48,159 --> 00:07:49,870
dig into those a little bit deeper as

194
00:07:49,870 --> 00:07:51,580
well so what we're going to do now is

195
00:07:51,580 --> 00:07:54,550
break out the four main components that

196
00:07:54,550 --> 00:07:57,699
comprise of the docker environment the

197
00:07:57,699 --> 00:07:59,979
four components are as follows the

198
00:07:59,979 --> 00:08:01,479
docker clientís server which we've

199
00:08:01,479 --> 00:08:04,150
already done a deeper dive on docker

200
00:08:04,150 --> 00:08:07,599
images docker containers and the dagger

201
00:08:07,599 --> 00:08:10,539
registry so if we look at the structure

202
00:08:10,539 --> 00:08:12,490
that we have here on the left-hand side

203
00:08:12,490 --> 00:08:14,469
you see the relationship between the

204
00:08:14,469 --> 00:08:17,050
docker client and the darkest server and

205
00:08:17,050 --> 00:08:20,259
then we have the rest api in between now

206
00:08:20,259 --> 00:08:22,449
if we start digging into that rest api

207
00:08:22,449 --> 00:08:24,370
particularly the relationship with the

208
00:08:24,370 --> 00:08:26,650
daka daemon on the server we actually

209
00:08:26,650 --> 00:08:29,800
have our other elements that form the

210
00:08:29,800 --> 00:08:31,659
different components of the docker

211
00:08:31,659 --> 00:08:33,729
ecosystem so the docker client is

212
00:08:33,729 --> 00:08:35,919
accessed from your terminal window so if

213
00:08:35,919 --> 00:08:37,599
you are using Windows this can be

214
00:08:37,599 --> 00:08:39,880
PowerShell on Mac it's going to be your

215
00:08:39,880 --> 00:08:42,399
terminal window and it allows you to run

216
00:08:42,399 --> 00:08:44,229
the docker daemon and the registry

217
00:08:44,229 --> 00:08:46,270
service when you have your terminal

218
00:08:46,270 --> 00:08:48,279
window open so you can actually use your

219
00:08:48,279 --> 00:08:50,890
terminal window to create instructions

220
00:08:50,890 --> 00:08:53,350
on how to build and run your

221
00:08:53,350 --> 00:08:55,630
images and containers if we look at the

222
00:08:55,630 --> 00:08:58,450
images part of our registry here we

223
00:08:58,450 --> 00:09:00,220
actually see that the image is really

224
00:09:00,220 --> 00:09:02,260
just a template with the instructions

225
00:09:02,260 --> 00:09:04,930
used for creating the containers which

226
00:09:04,930 --> 00:09:07,120
you use within docker the document image

227
00:09:07,120 --> 00:09:09,400
is built using a file called the docker

228
00:09:09,400 --> 00:09:11,800
file and then once you've created that

229
00:09:11,800 --> 00:09:14,590
docker file you store that image in the

230
00:09:14,590 --> 00:09:16,930
docker hub or registry and that allows

231
00:09:16,930 --> 00:09:19,150
other people to be able to access the

232
00:09:19,150 --> 00:09:21,760
same structure of a docker environment

233
00:09:21,760 --> 00:09:23,830
that you've created the syntax of

234
00:09:23,830 --> 00:09:26,500
creating the image is fairly simple it's

235
00:09:26,500 --> 00:09:27,610
something that you'll be able to get

236
00:09:27,610 --> 00:09:29,650
your arms around very quickly and

237
00:09:29,650 --> 00:09:31,510
essentially what you're doing is you're

238
00:09:31,510 --> 00:09:34,360
creating the option of a new container

239
00:09:34,360 --> 00:09:36,910
you're identifying what the image will

240
00:09:36,910 --> 00:09:38,980
look like what are the commands that are

241
00:09:38,980 --> 00:09:40,840
needed and the arguments for and then

242
00:09:40,840 --> 00:09:42,760
those commands and once you've done that

243
00:09:42,760 --> 00:09:45,310
you have a definition for what your

244
00:09:45,310 --> 00:09:48,160
image will look like so if we look here

245
00:09:48,160 --> 00:09:50,410
at what the container itself looks like

246
00:09:50,410 --> 00:09:53,350
is that the container is a standalone

247
00:09:53,350 --> 00:09:55,780
executable package which includes

248
00:09:55,780 --> 00:09:58,030
applications and their dependencies it's

249
00:09:58,030 --> 00:09:59,860
the instructions for what your

250
00:09:59,860 --> 00:10:01,840
environment will look like so you can be

251
00:10:01,840 --> 00:10:04,210
consistent in how that environment is

252
00:10:04,210 --> 00:10:05,820
shared between multiple developers

253
00:10:05,820 --> 00:10:08,260
testing units and other people within

254
00:10:08,260 --> 00:10:10,240
your DevOps team now the thing that's

255
00:10:10,240 --> 00:10:12,370
great about working with docker is that

256
00:10:12,370 --> 00:10:13,900
it's so lightweight that you can

257
00:10:13,900 --> 00:10:16,630
actually run multiple docker containers

258
00:10:16,630 --> 00:10:19,120
in the same infrastructure and share the

259
00:10:19,120 --> 00:10:21,370
same operating system this is its

260
00:10:21,370 --> 00:10:23,590
strength it allows you to be able to

261
00:10:23,590 --> 00:10:25,540
create those multiple environments that

262
00:10:25,540 --> 00:10:27,580
you need for multiple projects so you're

263
00:10:27,580 --> 00:10:29,710
working on interestingly though within

264
00:10:29,710 --> 00:10:32,260
each container that contain it creates

265
00:10:32,260 --> 00:10:35,500
an isolated area for the applications to

266
00:10:35,500 --> 00:10:37,980
run so while you can run multiple

267
00:10:37,980 --> 00:10:40,660
containers in an infrastructure each of

268
00:10:40,660 --> 00:10:43,060
those containers are completely isolated

269
00:10:43,060 --> 00:10:44,740
they're protected so that you can

270
00:10:44,740 --> 00:10:47,560
actually control how your solutions work

271
00:10:47,560 --> 00:10:49,690
there now as a team you may start off

272
00:10:49,690 --> 00:10:51,700
with one or two developers on your team

273
00:10:51,700 --> 00:10:53,680
but when a project starts becoming more

274
00:10:53,680 --> 00:10:56,050
important and you start adding in more

275
00:10:56,050 --> 00:10:58,750
people to your team you may have 15

276
00:10:58,750 --> 00:11:01,240
people that are offshore you may have 10

277
00:11:01,240 --> 00:11:04,380
people that are local you may have 15

278
00:11:04,380 --> 00:11:06,340
consultants that are working on your

279
00:11:06,340 --> 00:11:06,810
project

280
00:11:06,810 --> 00:11:09,330
you have a need for each of those two

281
00:11:09,330 --> 00:11:11,340
verbs or each person on your team to

282
00:11:11,340 --> 00:11:14,340
have access to that docket image and to

283
00:11:14,340 --> 00:11:16,590
get access to that image we use a docker

284
00:11:16,590 --> 00:11:18,840
registry which is an open source server

285
00:11:18,840 --> 00:11:20,790
site servers for hosting and

286
00:11:20,790 --> 00:11:23,220
distributing the images that you have

287
00:11:23,220 --> 00:11:26,400
defined you can also use docker itself

288
00:11:26,400 --> 00:11:28,680
as its own default Rattray and docker

289
00:11:28,680 --> 00:11:30,510
hub now something it has to be very

290
00:11:30,510 --> 00:11:31,350
mindful is that

291
00:11:31,350 --> 00:11:33,870
for publicly shared images you may want

292
00:11:33,870 --> 00:11:35,940
to have your own private images in which

293
00:11:35,940 --> 00:11:37,620
case you would do that through your own

294
00:11:37,620 --> 00:11:39,839
registry so once again public

295
00:11:39,839 --> 00:11:42,000
repositories can be used to host the

296
00:11:42,000 --> 00:11:43,830
docket images which can be accessed by

297
00:11:43,830 --> 00:11:46,170
anyone and I really encourage you to go

298
00:11:46,170 --> 00:11:48,720
out to docker and see the other docket

299
00:11:48,720 --> 00:11:49,860
images that have been created because

300
00:11:49,860 --> 00:11:51,750
there may be tools there that you can

301
00:11:51,750 --> 00:11:53,970
use to speed up your own development

302
00:11:53,970 --> 00:11:56,520
environments now you will also get to a

303
00:11:56,520 --> 00:11:58,520
point where you start creating

304
00:11:58,520 --> 00:12:00,990
environments that are very specific to

305
00:12:00,990 --> 00:12:03,150
the solutions that you are building and

306
00:12:03,150 --> 00:12:04,980
when you get to that point you'll likely

307
00:12:04,980 --> 00:12:07,110
want to create a private repository so

308
00:12:07,110 --> 00:12:08,790
you're not sharing that knowledge with

309
00:12:08,790 --> 00:12:11,220
the world in general now the way in

310
00:12:11,220 --> 00:12:13,200
which you connect with the docker

311
00:12:13,200 --> 00:12:15,360
registry is through simple pull and push

312
00:12:15,360 --> 00:12:17,280
commands that you run through terminal

313
00:12:17,280 --> 00:12:19,410
window to be able to get the latest

314
00:12:19,410 --> 00:12:21,570
information so if you want to be able to

315
00:12:21,570 --> 00:12:23,700
build your own container what you'll

316
00:12:23,700 --> 00:12:26,220
start doing is using the pull commands

317
00:12:26,220 --> 00:12:28,260
to actually pull the image from the

318
00:12:28,260 --> 00:12:30,750
docker repository and the command line

319
00:12:30,750 --> 00:12:33,120
that is fairly simple in terminal window

320
00:12:33,120 --> 00:12:34,320
you would write docker

321
00:12:34,320 --> 00:12:36,660
pull and then you put in the image name

322
00:12:36,660 --> 00:12:39,300
and any tags associated with that image

323
00:12:39,300 --> 00:12:42,089
and use the command pools so in your

324
00:12:42,089 --> 00:12:44,280
terminal window you would actually use a

325
00:12:44,280 --> 00:12:46,470
simple line of command once you've

326
00:12:46,470 --> 00:12:47,760
actually connected to your docker

327
00:12:47,760 --> 00:12:49,980
environment and that command will be

328
00:12:49,980 --> 00:12:52,380
docker pull with the image name and any

329
00:12:52,380 --> 00:12:54,600
associated tags around that image what

330
00:12:54,600 --> 00:12:57,120
that will then do is pour the image from

331
00:12:57,120 --> 00:12:59,400
the docker repository whether that's a

332
00:12:59,400 --> 00:13:01,709
public repository or a private one now

333
00:13:01,709 --> 00:13:03,750
in Reverse if you want to be able to

334
00:13:03,750 --> 00:13:06,839
update the docker image with a new

335
00:13:06,839 --> 00:13:09,540
information you do a push command where

336
00:13:09,540 --> 00:13:11,339
you would take the script that you've

337
00:13:11,339 --> 00:13:13,260
written about the docker container that

338
00:13:13,260 --> 00:13:15,120
you defined and push it to the

339
00:13:15,120 --> 00:13:17,700
repository and as you can imagine the

340
00:13:17,700 --> 00:13:20,010
commands for that are also fairly simple

341
00:13:20,010 --> 00:13:20,460
in

342
00:13:20,460 --> 00:13:22,290
terminal window you would write darker

343
00:13:22,290 --> 00:13:24,930
push the image name any associated tags

344
00:13:24,930 --> 00:13:27,240
and then that would then push that image

345
00:13:27,240 --> 00:13:29,760
to the docker repository again either a

346
00:13:29,760 --> 00:13:32,730
public or a private repository so if we

347
00:13:32,730 --> 00:13:34,920
recap the docker file creates a docker

348
00:13:34,920 --> 00:13:37,520
image that's using the build commands

349
00:13:37,520 --> 00:13:39,570
docket image then contains all the

350
00:13:39,570 --> 00:13:41,910
information necessary for you to be able

351
00:13:41,910 --> 00:13:44,400
to execute the project using the docket

352
00:13:44,400 --> 00:13:46,770
image any user can run the code in order

353
00:13:46,770 --> 00:13:49,650
to create a docker container and once

354
00:13:49,650 --> 00:13:51,360
the docket images build is uploaded to a

355
00:13:51,360 --> 00:13:53,400
registry or to a docker hub where it can

356
00:13:53,400 --> 00:13:55,740
be shared across your entire team and

357
00:13:55,740 --> 00:13:58,020
from the docker hub users can get access

358
00:13:58,020 --> 00:13:59,730
to the docket image and build their own

359
00:13:59,730 --> 00:14:03,390
new containers so the five key takeaways

360
00:14:03,390 --> 00:14:05,160
here so with a virtual machine you're

361
00:14:05,160 --> 00:14:08,550
able to create a virtualized environment

362
00:14:08,550 --> 00:14:10,650
to run an application on an operating

363
00:14:10,650 --> 00:14:12,900
system with docker it allows you to

364
00:14:12,900 --> 00:14:15,450
focus on just running the application

365
00:14:15,450 --> 00:14:18,870
and doing it consistently it improves

366
00:14:18,870 --> 00:14:20,820
the ability for teams to be able to

367
00:14:20,820 --> 00:14:22,980
share environments that are consistent

368
00:14:22,980 --> 00:14:25,380
from team to team it's highly productive

369
00:14:25,380 --> 00:14:27,630
and it's really quick and easy to

370
00:14:27,630 --> 00:14:30,570
configure the architecture of docker is

371
00:14:30,570 --> 00:14:32,940
really primarily built out of four

372
00:14:32,940 --> 00:14:34,710
components of which the one that you'll

373
00:14:34,710 --> 00:14:36,630
use the most is the client-server

374
00:14:36,630 --> 00:14:38,700
environment where as a developer you

375
00:14:38,700 --> 00:14:40,350
have a client application running on

376
00:14:40,350 --> 00:14:42,720
your local machine and then you connect

377
00:14:42,720 --> 00:14:45,360
with a server environment where you're

378
00:14:45,360 --> 00:14:46,950
getting the latest information about

379
00:14:46,950 --> 00:14:49,080
that container that you're building a

380
00:14:49,080 --> 00:14:51,540
solution for and then finally what we

381
00:14:51,540 --> 00:14:53,820
see with the workflow improvements with

382
00:14:53,820 --> 00:14:56,880
docker is that the goal is to be able to

383
00:14:56,880 --> 00:14:59,430
be more efficient to be able to be more

384
00:14:59,430 --> 00:15:01,200
consistent with your development

385
00:15:01,200 --> 00:15:03,600
environments and be able to push out

386
00:15:03,600 --> 00:15:06,000
those environments whether it goes to a

387
00:15:06,000 --> 00:15:08,970
test person to a business analyst or

388
00:15:08,970 --> 00:15:11,640
anybody else on your DevOps team so they

389
00:15:11,640 --> 00:15:13,740
have a consistent environment that looks

390
00:15:13,740 --> 00:15:15,780
and acts exactly like your production

391
00:15:15,780 --> 00:15:17,910
environment and can be eventually pushed

392
00:15:17,910 --> 00:15:19,710
out to a production environment using

393
00:15:19,710 --> 00:15:21,690
tools such as puppet or chef so you're

394
00:15:21,690 --> 00:15:24,060
creating a consistent operations

395
00:15:24,060 --> 00:15:26,310
environment really hope you've enjoyed

396
00:15:26,310 --> 00:15:29,130
this presentation as always click like

397
00:15:29,130 --> 00:15:31,880
and subscribe below to get more of these

398
00:15:31,880 --> 00:15:33,900
presentations and if you have any

399
00:15:33,900 --> 00:15:34,290
question

400
00:15:34,290 --> 00:15:38,089
please put those in the comments below

401
00:15:39,919 --> 00:15:42,179
hi there if you like this video

402
00:15:42,179 --> 00:15:44,220
subscribe to the simple learn YouTube

403
00:15:44,220 --> 00:15:46,799
channel and click here to watch similar

404
00:15:46,799 --> 00:15:48,749
videos de nerd up and get certified

405
00:15:48,749 --> 00:15:51,589
click here

